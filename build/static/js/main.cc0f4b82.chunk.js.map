{"version":3,"sources":["firebase.js","StateProvider.js","Chat.js","reducer.js","Login.js","SidebarChat.js","Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Chat","useState","setSeed","input","setInput","roomId","useParams","roomName","setRoomName","messages","setMessages","user","useEffect","collection","doc","onSnapshot","snapshot","data","name","orderBy","docs","map","Math","floor","random","sendMessage","e","preventDefault","add","message","displayName","timestamp","FieldValue","serverTimestamp","className","Avatar","src","Date","length","toDate","toUTCString","IconButton","MoreVert","InsertEmoticon","type","placeholder","onChange","target","onClick","SendOutlined","actionTypes","state","action","console","log","Login","dispatch","Button","signInWithPopup","then","result","catch","error","SidebarChat","addNewChat","id","to","Sidebar","rooms","setRooms","unsubscribe","photoURL","AddOutlined","prompt","room","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc0f4b82.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCjxgX24RNaKs9aoaGl4QU32yMk_Bby9h0\",\n    authDomain: \"spacieschat.firebaseapp.com\",\n    projectId: \"spacieschat\",\n    storageBucket: \"spacieschat.appspot.com\",\n    messagingSenderId: \"621788177274\",\n    appId: \"1:621788177274:web:585eb06d8cc338eba32cc3\",\n    measurementId: \"G-Y9ZQ3YFLJ9\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const db = firebaseApp.firestore();\n  const auth = firebase.auth();\n  const provider = new firebase.auth.GoogleAuthProvider();\n  \n  export { auth, provider };\n  export default db;\n","import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const StateContext = createContext();\n\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);","import { Avatar, IconButton } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Chat.css\";\nimport {\n  AttachFile,\n  InsertEmoticon,\n  Mic,\n  MoreVert,\n  SearchOutlined,\n  SendOutlined,\n} from \"@material-ui/icons\";\nimport { useParams } from \"react-router-dom\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Chat() {\n  const [seed, setSeed] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  const { roomId } = useParams();\n  const [roomName, setRoomName] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    if (roomId) {\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .onSnapshot((snapshot) => {\n          setRoomName(snapshot.data().name);\n        });\n\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"asc\")\n        .onSnapshot((snapshot) =>\n          setMessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n    return () => {};\n  }, [roomId]);\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\n      message: input,\n      name: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${roomId}.svg`} />\n        <div className=\"chat__headerInfo\">\n          <h3>{roomName}</h3>\n          <p>\n            Last seen at{\" \"}\n            {new Date(\n              messages[messages.length - 1]?.timestamp?.toDate()\n            ).toUTCString()}\n          </p>\n        </div>\n        <div className=\"chat__headerRight\">\n          <IconButton>\n            <MoreVert />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"chat__body\">\n        {messages.map((message) => (\n          <p\n            className={`chat__message ${\n              message.name === user.displayName && \"chat__receiver\"\n            }`}\n          >\n            <span className=\"chat__name\">{message.name}</span>\n            {message.message}\n            <span className=\"chat__timestamp\">\n              {new Date(message.timestamp?.toDate()).toUTCString()}\n            </span>\n          </p>\n        ))}\n      </div>\n      <div className=\"chat__footer\">\n        <InsertEmoticon />\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"Type a message\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          />\n          <button type=\"submit\" onClick={sendMessage}>\n          Type a message\n          </button>\n        </form>\n        <SendOutlined type=\"submit\" onClick={sendMessage}/>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","export const initialState = {\n    user: null,\n  };\n  \n  export const actionTypes = {\n    SET_USER: \"SET_USER\",\n  };\n  \n  const reducer = (state, action) => {\n    console.log(action);\n    switch (action.type) {\n      case actionTypes.SET_USER:\n        return {\n          ...state,\n          user: action.user,\n        };\n      default:\n        return state;\n    }\n  };\n  \n  export default reducer;\n  ","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport \"./Login.css\";\nimport { auth, provider } from \"./firebase\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\n\nfunction Login() {\n  const [{}, dispatch] = useStateValue();\n\n  const signIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((result) => {\n        dispatch({\n          type: actionTypes.SET_USER,\n          user: result.user,\n        });\n      })\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__container\">\n        <div className=\"login__text\">\n          <h1>SPACIES</h1>\n        </div>\n\n        <Button onClick={signIn}>\n          <MailOutlineIcon className=\"mailIconLogin\" />\n          SIGN IN\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;","import { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport db from \"./firebase\";\nimport \"./SidebarChat.css\";\n\nfunction SidebarChat({ addNewChat, id, name }) {\n  const [seed, setSeed] = useState(\"\");\n  const [messages, setMessages] = useState(\"\");\n\n  useEffect(() => {\n    if (id) {\n      db.collection(\"rooms\")\n        .doc(id)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n        setMessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n    console.log(messages);\n  }, [id]);\n\n\n  return (\n    <Link to={`/rooms/${id}`}>\n      <div className=\"sidebarChat\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${id}.svg`} />\n        <div className=\"sidebarChat__info\">\n          <h2>{name}</h2>\n          <p>{messages[0]?.message}</p>\n        </div>\n      </div>\n    </Link>\n  )\n}\n\nexport default SidebarChat;","import { Avatar, IconButton } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Sidebar.css\";\nimport { AddOutlined} from \"@material-ui/icons\";\nimport SidebarChat from \"./SidebarChat\";\nimport db from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Sidebar() {\n  const [rooms, setRooms] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) =>\n      setRooms(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          data: doc.data(),\n        }))\n      )\n    );\n\n    return()=>{\n      unsubscribe();\n    }\n  }, []);\n\n  const createChat = () => {\n    const roomName = prompt(\"Please enter name for your space room\");\n    if (roomName) {\n      db.collection(\"rooms\").add({\n        name: roomName,\n      });\n    }\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <IconButton>\n        <Avatar src={user?.photoURL}/>\n        </IconButton>\n        <IconButton>\n            <AddOutlined onClick={createChat}/>\n          </IconButton>\n    </div>\n      <div className=\"sidebar__chats\">\n        {rooms.map((room) => (\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Chat from \"./Chat\";\nimport Login from \"./Login\";\nimport Sidebar from \"./Sidebar\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n\n  return (\n    // BEM naming convention\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n          <BrowserRouter>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomId\">\n                <Chat />\n              </Route>\n              <Route path=\"/\">\n                <div className=\"app__body-emptyChat\">\n                </div>\n              </Route>\n            </Switch>\n          </BrowserRouter>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}